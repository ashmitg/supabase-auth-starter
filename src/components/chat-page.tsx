/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/5HFuQc6ruap
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent } from "@/components/ui/dropdown-menu"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Textarea } from "@/components/ui/textarea"

export function ChatPage() {
  const [chatHistory, setChatHistory] = useState([
    { sender: "user", content: "Hi there!" },
    { sender: "chatbot", content: "Hello! How can I assist you today?" },
    { sender: "user", content: "I have a question about your product." },
    { sender: "chatbot", content: "Sure, I'd be happy to help. What would you like to know?" },
    { sender: "user", content: "What are the key features of your product?" },
    { sender: "chatbot", content: "Our product has several key features, including..." },
    { sender: "user", content: "That's great, thanks for the information!" },
    { sender: "chatbot", content: "You're welcome! Let me know if you have any other questions." },
  ])
  const [currentMessage, setCurrentMessage] = useState("")
  const [activeChatId, setActiveChatId] = useState(null)
  const [chats, setChats] = useState([])
  const [isSidebarOpen, setIsSidebarOpen] = useState(false)
  const handleNewChat = () => {
    const newChatId = Date.now().toString()
    setActiveChatId(newChatId)
    setChats([...chats, { id: newChatId, messages: [] }])
  }
  const handleChatSelect = (chatId) => {
    setActiveChatId(chatId)
    setChatHistory(chats.find((chat) => chat.id === chatId).messages)
  }
  const handleMessageSend = () => {
    if (currentMessage.trim() !== "") {
      setChatHistory([...chatHistory, { sender: "user", content: currentMessage }])
      setCurrentMessage("")
      setTimeout(() => {
        setChatHistory([...chatHistory, { sender: "chatbot", content: "This is a sample chatbot response." }])
      }, 1000)
      const currentChat = chats.find((chat) => chat.id === activeChatId)
      currentChat.messages = [...currentChat.messages, { sender: "user", content: currentMessage }]
      setChats([...chats])
    }
  }
  return (
    <div className="flex h-screen w-full">
      <div className="hidden md:relative md:z-auto md:w-64 md:border-r md:bg-muted/40">
        <div className="flex h-[60px] items-center px-6">
          <h1 className="text-lg font-semibold">Chats</h1>
        </div>
        <div className="flex-1 overflow-auto">
          <div className="grid gap-2 p-4">
            <Button
              variant="ghost"
              className="justify-start gap-2 rounded-md px-3 py-2 text-left hover:bg-muted"
              onClick={handleNewChat}
            >
              <PlusIcon className="h-4 w-4" />
              New Chat
            </Button>
            {chats.map((chat) => (
              <Button
                key={chat.id}
                variant="ghost"
                className={`justify-start gap-2 rounded-md px-3 py-2 text-left hover:bg-muted ${
                  activeChatId === chat.id ? "bg-muted" : ""
                }`}
                onClick={() => handleChatSelect(chat.id)}
              >
                <MessageCircleIcon className="h-4 w-4" />
                <span className="truncate">Chat {chats.indexOf(chat) + 1}</span>
              </Button>
            ))}
          </div>
        </div>
      </div>
      <div className="flex flex-1 flex-col">
        <div className="flex h-[60px] items-center border-b bg-muted/40 px-6">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="mr-4 rounded-full ">
                <MenuIcon className="h-6 w-6" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-[200px]">
              <div className="grid gap-2 p-4">
                <Button
                  variant="ghost"
                  className="justify-start gap-2 rounded-md px-3 py-2 text-left hover:bg-muted"
                  onClick={handleNewChat}
                >
                  <PlusIcon className="h-4 w-4" />
                  New Chat
                </Button>
                {chats.map((chat) => (
                  <Button
                    key={chat.id}
                    variant="ghost"
                    className={`justify-start gap-2 rounded-md px-3 py-2 text-left hover:bg-muted ${
                      activeChatId === chat.id ? "bg-muted" : ""
                    }`}
                    onClick={() => handleChatSelect(chat.id)}
                  >
                    <MessageCircleIcon className="h-4 w-4" />
                    <span className="truncate">Chat {chats.indexOf(chat) + 1}</span>
                  </Button>
                ))}
              </div>
            </DropdownMenuContent>
          </DropdownMenu>
          <h1 className="text-lg font-semibold">
            {activeChatId ? `Chat ${chats.find((chat) => chat.id === activeChatId).id}` : "New Chat"}
          </h1>
        </div>
        <ScrollArea className="flex-1 overflow-auto p-4">
          {chatHistory.map((message, index) => (
            <div
              key={index}
              className={`mb-4 flex items-start gap-4 ${message.sender === "user" ? "justify-end" : ""}`}
            >
              <div
                className={`rounded-lg px-4 py-2 ${
                  message.sender === "user" ? "bg-primary text-primary-foreground" : "bg-muted"
                }`}
              >
                <p>{message.content}</p>
              </div>
            </div>
          ))}
        </ScrollArea>
        <div className="border-t bg-muted/40 p-4">
          <div className="relative">
            <Textarea
              placeholder="Type your message..."
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  handleMessageSend()
                }
              }}
              className="min-h-[48px] w-full rounded-2xl resize-none border border-neutral-400 px-4 py-2 shadow-sm"
            />
            <Button type="button" size="icon" className="absolute right-2 top-2" onClick={handleMessageSend}>
              <SendIcon className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}

function MenuIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="4" x2="20" y1="12" y2="12" />
      <line x1="4" x2="20" y1="6" y2="6" />
      <line x1="4" x2="20" y1="18" y2="18" />
    </svg>
  )
}


function MessageCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z" />
    </svg>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function SendIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  )
}
